{
    "questions": [
        {
            "id": 1,
            "title": "My First Code",
            "tags": [
                "Easy",
                "Array"
            ],
            "difficulty": "Easy",
            "score": 100,
            "description": "Your mother has sent you to the milkman with a cylindrical bottle. You have to pay the milkman the price for the bottle full of milk at a rate of ₹40 per litre of milk. You are given the radius (r) and the height (h) of the bottle in centimetres. You can assume the value of π as 3.14.",
            "input_format": " 1 line containing two space separated integers - the radius and the height of the bottle (in centimetres).",
            "output_format": "The first line contains 'T' denoting the no. of test cases.\nT lines each contain a number 'n' denoting the number of elements, followed by n space-separated numbers denoting the array elements.",
            "sample_input": [
                "2 34"
            ],
            "sample_output": [
                "75.36"
            ],
            "constraints": [
                "1 ≤ r ≤ 100",
                "1 ≤ r ≤ 100"
            ],
            "test_case": [
                {
                    "input": [
                        "2 34",
                        "3 34"
                    ],
                    "output": [
                        "75.36",
                        "34.45"
                    ]
                }

            ]
        },
        {
            "id": 2,
            "title": "Next Greater Permutation",
            "tags": [
                "Hard",
                "Array"
            ],
            "difficulty": "Hard",
            "score": 80,
            "description": "Given an array, rearrange it to its next greater permutation. Do it in-place with extra constant memory only. Do not use any library function for the next permutation.",
            "input_format": "The first line contains 'T' denoting the no. of test cases. Next T lines each contain a number 'n' denoting the number of elements, followed by n space-separated numbers denoting the array elements.",
            "output_format": "T lines each contain n numbers denoting the next greater permutation.",
            "sample_input": [
                "5",
                "3 1 3 2",
                "3 3 2 1",
                "3 2 2 9",
                "3 2 9 9",
                "1 4"
            ],
            "sample_output": [
                "2 1 3",
                "1 2 3",
                "2 9 2",
                "9 2 9",
                "4"
            ],
            "constraints": [
                "0 <= T <= 100",
                "1 <= N <= 105",
                "1 <= value of array element <= 105"
            ]
        },
        {
            "id": 3,
            "title": "Primes upto N",
            "tags": [
                "Medium",
                "Array"
            ],
            "difficulty": "Medium",
            "score": 50,
            "description": "Given a number, let’s say 10. Can you tell all the divisors of the number? For 10, there are 4 divisors (1, 2, 5 & 10). Let’s take 5, it has 2 divisors (1 & 5). A Prime number is a number that has exactly two divisors → 1 and itself. \nNote: 1 is not a prime number.",
            "input_format": "First-line contains ‘T’ denoting the number of independent test cases. For each test case, a line containing an integer ‘n’.",
            "output_format": "For each test case, print a space separated list of all the prime numbers between 1 and ‘n’ in ascending order.",
            "sample_input": [
                "3",
                "5",
                "1",
                "12"
            ],
            "sample_output": [
                "2 3 5",
                " ",
                "2 3 5 7 11"
            ],
            "constraints": [
                "1 <= T <= 100",
                "1 <= n <= 10000"
            ]
        },
        {
            "id": 4,
            "title": "Is Perfect Square",
            "tags": [
                "Easy",
                "Searching"
            ],
            "difficulty": "Easy",
            "score": 30,
            "description": "Given a positive integer num, write a function that returns true if num is a perfect square else false. Note: Do not use the in-built methods to calculate square root or power.",
            "input_format": "The first line contains 'T' denoting the no. of test cases. Next T lines each contain a number 'num'.",
            "output_format": "T lines each contain true or false denoting the answer for each test case.",
            "sample_input": [
                "2",
                "25",
                "30"
            ],
            "sample_output": [
                "true",
                "false"
            ],
            "constraints": [
                "0 <= T <= 105",
                "1 <= N <= 108"
            ]
        },
        {
            "id": 5,
            "title": "Three Sum",
            "tags": [
                "Medium",
                "Hashing",
                "Two Pointers"
            ],
            "difficulty": "Medium",
            "score": 50,
            "description": "Given an array A, find all unique triplets in the array whose sum is equal to zero.",
            "input_format": "The first line contains an integer ‘T’ denoting the number of test cases. For each test case, the input contains two lines: \nAn integer 'n' denoting the size of the array.\nn space-separated integers denoting the elements of A.",
            "output_format": "For each test case, the output contains the following lines. \nA line containing an integer ‘m’ denoting the number of unique triplets.\nm lines contain three integers representing each triplet.",
            "sample_input": [
                "2",
                "4",
                "-1 0 1 2",
                "5",
                "1 -1 9 -8 0"
            ],
            "sample_output": [
                "1",
                "-1 0 1",
                "2",
                "-8 -1 9",
                "-1 0 1"
            ],
            "constraints": [
                "1 <= T <= 10",
                "3 <= n <= 3000",
                "-105 <= Ai <= 105"
            ]
        },
        {
            "id": 6,
            "title": "Trapping Rain Water",
            "tags": [
                "Hard",
                "Dynamic Programming",
                "Stacks & Queues",
                "Two Pointers"
            ],
            "difficulty": "Hard",
            "score": 80,
            "description": "Given an array A where each element denotes a the height of blocks, calculate the total volume of water that can be trapped when it rains. Note: one cubic block has a volume of 1 unit.",
            "input_format": "First-line contains an integer ‘T’ denoting the number of test cases. For each test-case the input has two lines: \nAn integer ‘n’ denoting the size of the array A. \nn space separated integers denoting the elements of array A.",
            "output_format": "For each test case, the output has a line with an integer ‘w’ denoting the volume of trapped rainwater.",
            "sample_input": [
                "2",
                "5",
                "1 0 0 1 0",
                "6",
                "1 0 2 0 0 1"
            ],
            "sample_output": [
                "2",
                "3"
            ],
            "constraints": [
                "1 <= T <= 100",
                "1 <= n <= 30000",
                "0 <= Ai <= 104"
            ]
        },
        {
            "id": 7,
            "title": "Middle Element of Linked List",
            "tags": [
                "Easy                ",
                "Linked Lists"
            ],
            "difficulty": "Easy",
            "score": 30,
            "description": "Given a linked list, find the middle element and print its value. If the list has even number of elements, print the first of the two middle elements.",
            "input_format": "The first line contains ‘T’ denoting the number of independent test cases. For each test case the input has two lines:\nAn integer ‘n’ denoting the length of the linked list.\nn space-separated integers denoting elements of the linked list.",
            "output_format": "For each test case, a line containing an integer denoting the middle element of the linked list.",
            "sample_input": [
                "2",
                "4",
                "3 4 5 6",
                "1",
                "3"
            ],
            "sample_output": [
                "4",
                "3"
            ],
            "constraints": [
                "1 <= T <= 100",
                "1 <= n <= 103",
                "1 <= element <= 105"
            ]
        },
        {
            "id": 8,
            "title": "Rotate a Linked List",
            "tags": [
                "Medium",
                "Linked Lists"
            ],
            "difficulty": "Medium",
            "score": 50,
            "description": "Given a linked list, rotate it to the right by k nodes.",
            "input_format": "The first line contains an integer ‘T’, denoting the number of test cases. For each test case the input has three lines:\nAn integer ‘n’ denoting the length of the linked list.\nn space-separated integers denoting elements of the linked list.\nAn integer ‘k’ denoting the number of right-shifts you need to perform.",
            "output_format": "For each test case, a line containing space-separated elements of the linked list after rotation.",
            "sample_input": [
                "2",
                "4",
                "5 4 3 1",
                "2",
                "5",
                "1 2 3 4 5",
                "6"
            ],
            "sample_output": [
                "3 1 5 4",
                "5 1 2 3 4"
            ],
            "constraints": [
                "1 <= T <= 100",
                "0 <= n <= 104",
                "0 <= k <= 109",
                "1 <= elements <= 105"
            ]
        },
        {
            "id": 9,
            "title": "Kth Permutation Sequence",
            "tags": [
                "Hard",
                "Backtracking"
            ],
            "difficulty": "Hard",
            "score": 80,
            "description": "Given two integers n and k, find the kth permutation sequence of numbers from 1 to n. The numbers from 1 to n has n! unique permutations.",
            "input_format": "The first line contains an integer ‘T’, denoting the number of test cases. For each test case, a line containing space-separated integers ‘n’ and ‘k’.",
            "output_format": "For each test case, print the kth permutation in a separate line.",
            "sample_input": [
                "2",
                "4 3",
                "3 4"
            ],
            "sample_output": [
                "1324",
                "231"
            ],
            "constraints": [
                "1 <= T <= 100",
                "1 <= n <= 9",
                "1 <= k <= n!"
            ]
        },
        {
            "id": 10,
            "title": "Binary Tree Inorder Traversal",
            "tags": [
                "Easy",
                "Binary Trees"
            ],
            "difficulty": "Easy",
            "score": 30,
            "description": "Given a binary tree, return the inorder traversal of its elements.",
            "input_format": "The first line contains an integer T denoting the number of test cases. For each test case, the input has 2 lines:\nThe first line contains an integer n denoting the number of nodes in the tree (including the NULL nodes).\nThe second line contains n space-separated integers that will form the binary tree. The integers follow level order traversal of the tree where -1 indicates a NULL node.",
            "output_format": "For each test case, the output has a line containing the inorder traversal of the tree.",
            "sample_input": [
                "5",
                "12",
                "1 2 3 4 5 6 -1 -1 -1 7 -1 8",
                "7",
                "1 2 -1 4 -1 5 6",
                "7",
                "8 -1 9 -1 10 11 12",
                "5",
                "28 14 11 -1 48",
                "1",
                "6"
            ],
            "sample_output": [
                "4 2 7 5 1 8 6 3",
                "5 4 6 2 1",
                "8 9 11 10 12",
                "14 48 28 11",
                "6"
            ],
            "constraints": [
                "1 <= T <= 10",
                "1 <= node value <= 104"
            ]
        }
    ]
}